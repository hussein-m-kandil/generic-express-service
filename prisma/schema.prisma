generator client {
  provider = "prisma-client-js"
  output   = "./client"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id           String         @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  order        Int            @unique @default(autoincrement())
  bio          String         @default("")
  password     String         @db.Char(60)
  fullname     String         @db.VarChar(100)
  username     String         @unique @db.VarChar(50)
  isAdmin      Boolean        @default(false) @map("is_admin")
  createdAt    DateTime       @default(now()) @map("created_at")
  updatedAt    DateTime       @updatedAt @map("updated_at")
  avatar       Avatar?
  images       Image[]
  posts        Post[]
  comments     Comment[]
  votesOnPosts VotesOnPosts[]

  @@map("users")
}

model Comment {
  id        String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  order     Int      @unique @default(autoincrement())
  author    User     @relation(fields: [authorId], references: [id], onDelete: Cascade)
  authorId  String   @map("author_id") @db.Uuid
  post      Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId    String   @map("post_id") @db.Uuid
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
  content   String

  @@map("comments")
}

model Post {
  id        String         @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  order     Int            @unique @default(autoincrement())
  author    User           @relation(fields: [authorId], references: [id], onDelete: Cascade)
  authorId  String         @map("author_id") @db.Uuid
  published Boolean        @default(false)
  createdAt DateTime       @default(now()) @map("created_at")
  updatedAt DateTime       @updatedAt @map("updated_at")
  votes     VotesOnPosts[]
  tags      TagsOnPosts[]
  comments  Comment[]
  content   String
  title     String
  image     Image?         @relation(fields: [imageId], references: [id])
  imageId   String?        @map("image_id") @db.Uuid

  @@map("posts")
}

model Tag {
  order Int           @unique @default(autoincrement())
  name  String        @unique
  posts TagsOnPosts[]

  @@map("tags")
}

model TagsOnPosts {
  id     String @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  post   Post   @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId String @map("post_id") @db.Uuid
  tag    Tag    @relation(fields: [name], references: [name], onDelete: Cascade)
  name   String

  @@unique([postId, name])
  @@map("posts_tags")
}

model VotesOnPosts {
  id        String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  order     Int      @unique @default(autoincrement())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String   @map("user_id") @db.Uuid
  post      Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId    String   @map("post_id") @db.Uuid
  isUpvote  Boolean  @default(true) @map("is_upvote")
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@unique([userId, postId])
  @@map("posts_votes")
}

model Image {
  id              String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  order           Int      @unique @default(autoincrement())
  ownerId         String   @map("owner_id") @db.Uuid
  owner           User     @relation(fields: [ownerId], references: [id], onDelete: Cascade)
  createdAt       DateTime @default(now()) @map("created_at")
  updatedAt       DateTime @updatedAt @map("updated_at")
  storageFullPath String   @map("storage_full_path")
  storageId       String   @map("storage_id")
  info            String   @default("")
  alt             String   @default("")
  src             String   @unique
  mimetype        String
  size            Int
  width           Int
  height          Int
  xPos            Int      @default(0) @map("x_pos")
  yPos            Int      @default(0) @map("y_pos")
  scale           Float    @default(1.0)
  posts           Post[]
  avatars         Avatar[]

  @@map("images")
}

model Avatar {
  userId  String @unique @map("user_id") @db.Uuid
  user    User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  imageId String @map("image_id") @db.Uuid
  image   Image  @relation(fields: [imageId], references: [id], onDelete: Cascade)
}

model Visitor {
  id        String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  createdAt DateTime @default(now()) @map("created_at")
}

model Creation {
  id        String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  model     Model
  username  String
  isAdmin   Boolean  @map("is_admin")
  createdAt DateTime @default(now()) @map("created_at")
}

enum Model {
  COMMENT
  IMAGE
  USER
  VOTE
  POST
  TAG
}
